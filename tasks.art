routines: #[]
tasks: #[]

section: $[name :string :literal kind :literal][
    if literal? name -> name: to :string name
    
    decorators: #[
        task:    #[hr: '=', bullet: ">>", name: upper name] 
        routine: #[hr: '-', bullet: "*",  name: name] 
    ]
    
    decorator: decorators\[kind] 
    
    hr: decorator\hr
    bullet: decorator\bullet
    name: decorator\name

    display: ~"|bullet| |name|"
    
    print ""
    print pad.with: hr "" (size display) + (inc size bullet) 
    print display
    print ""
]

define :routine [
    init: constructor [name :literal :string action :block]
    act: method [][
        do \action
    ]
]

define :task is :routine [
    init: constructor [name :string :literal action :block requires :block defers :block]
    
    act: method [][
        \callAuxiliary \requires
        do \action
        \callAuxiliary \defers
    ]

    callAuxiliary: method [procedures :block][
        loop procedures [name][
            name: to :string name
            instance: null

            if in? name keys routines [
                section name 'routine
                instance: routines\[name]
            ]
            if in? name keys tasks [
                section name 'task
                instance: tasks\[name]
            ]

            do -> instance\act
        ]
    ]
]

routine: $[name :literal :string action :block][
    routines\[name]: to :routine [name action]
]

task: $[name :literal :string action :block][
    requires: (attr 'requires) ?? []
    defers: (attr 'defers) ?? []
    ensure -> block? requires
    ensure -> block? defers

    tasks\[name]: to :task [name action requires defers]
]

directory: $[path :string][
    write.directory path null
]

file: $[filename :string action :block][
    requires: (attr 'requires) ?? @[filename]
    asAttr: (attr 'as) ?? 'f

    ensure -> all? (map requires => exists?)

    let asAttr #[
        file: filename
        requires: requires
    ] 

    do action

]

executeTask: $[target :string :literal][
    target: to :string target
    ensure.that: ~{Task "|target|" is defined. Did you mean: "|maximum keys tasks 'tk [jaro target tk]|"?}
        -> in? target keys tasks

    exec: $[command :string :literal params :string][
        command: to :string command
        print execute join.with: " " @[command params]
    ]
    alias {|>} 'exec

    tsk: tasks\[target]

    loop (tsk\requires ++ tsk\defers) 'fn [
        fn: to :string fn
        ensure.that: ~{Task/Routine "|fn|" was defined.} 
            -> or? in? fn keys tasks in? fn keys routines  
    ]
    
    section target 'task
    do -> tsk\act

]